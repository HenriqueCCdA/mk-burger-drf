[tool.poetry]
name = "mk-burger-drf"
version = "0.1.0"
description = "Api em DRF para mk-burger"
authors = ["Henrique C. C. de Andrade <henrique.ccda@gmail.com>"]
license = "MIT"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
django = "^5.0"
djangorestframework = "^3.14.0"
drf-spectacular = "^0.27.0"
gunicorn = "^21.2.0"
python-decouple = "^3.8"
dj-database-url = "^2.1.0"
psycopg2 = "^2.9.9"


[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
black = "^23.12.1"
ruff = "^0.1.9"
taskipy = "^1.12.2"
pytest-django = "^4.7.0"
django-extensions = "^3.2.3"
coverage = "^7.3.4"
pytest-cov = "^4.1.0"
ipython = "^8.19.0"
ipdb = "^0.13.13"
pre-commit = "^3.6.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.black]
line-length = 120
exclude = '''
/(
      \.eggs
    | \.git
    | \.venv
)/
'''

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "mk_burger.settings"
addopts = "-ra -vv"

markers=[
    "unity: marks unity tests",
    "integration: marks integration testes",
]

[tool.ruff]
line-length = 120

select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]

exclude = [
    ".venv"
]

src = ["src"]


[tool.taskipy.variables]
src = "mk_burger"

[tool.taskipy.tasks]
fmt_black = {cmd="poetry run black {src}", help="Chamando do black.", use_vars = true}
fmt_ruff= {cmd="poetry run ruff {src} --fix", help="Chamando do ruff.", use_vars = true}
fmt = {cmd="task fmt_ruff && task fmt_black", help="Formatador do c√≥digo."}

lin_ruff = {cmd="poetry run ruff check {src}", help="Linter com o Ruff.", use_vars = true}
linter = {cmd="task lin_ruff", help="Linter."}

tests = {cmd="pytest", help="Rodando os testes."}
tests_cov = {cmd="pytest --cov-report html --cov={src}", help="Rodando os testes com cobertura.", use_vars = true}

server_coverage = {cmd="python -m http.server 8001 -d htmlcov", help="Mostrando o relatorio de cobertura de teste."}

clean = {cmd="rm -rvf .ruff_cache && rm -v .coverage && rm -rfv .pytest_cache && rm -rvf htmlcov && find mk_burger -name '*.pyc' -exec rm -vf {} \\;", help="Limpa o projeto."}

db = {cmd="docker compose up database -d", help="Subindo o contanier do DB."}
